입문주차와 입력받는 방식의 차이는 입력방식에 대한 세세한 컨트롤이 된다는 부분인 것
같다. 공통점으로는 그것을 입력받을때 호출되는 횟수는 똑같다.

CharacterManager는 모든 캐릭터를 싱글톤으로 올려서 외부에서 접근이 편하게 하기위해
만들어 놓은 것이고 player는 단순히 내 자신이 들고있는 것들에 대한 데이터를 들고 있는것이다
이로써 얻을 수 있는 이점은 player에 외부에서 일일히 데이터를 GetCompoment하는것이
아닌 player스크립트에 접근하면 모든내용을 긁어올 수 있게 하는 메리트가 있다.

Move : OnMove 로 입력할 때 그 어떤키를 눌렀는지 vector2로 값을 가져온다. 손을 땠을
땐 그걸 초기화해준다. Move에서는 그 값을 가져와서 어떻게 생겨먹을지 모를 내 자신에
앞의 위치를 가져온다. Vector3.forward와 transform.forward는 다를 수 있기에(각도를
돌려버리면 다르다) 거기에 앞뒤 오른쪽 왼쪽으로 값을 더한 백터에 y값은 내 중력값이 
계산이 된 velocity에 있는 y값을 채워주고 (이걸 0으로 할 시 점프를 못함) 그 값을
넣어준다.

CameraLook : 일단 mouseDelta라는 녀석은 내가 움직이는 시점에 얼만큼 움직였나를
반환해주는 값이다. 그건 카메라가 고정되어있기에 내 시점으로 고정되어있고 움직일때
그 곳으로 카메라를 돌려주는 것이여서 이 데이터가 필요하다. 축에 대해서는 unity에서 
조금만 만져봐도 알수 있다. x축 즉 위아래로 보는 목을 꺽어서 뒤로 보면 괴리감이 들
수 있기에 clamp로 제한을 걸어두고 시작한다. 그값을 넣어주는데 eulerAngles로 넣어줄
경우 기존에 움직이는 도리도리 값이 적용되지않는 문제가 있따. 그래서 localEulerAngles에
넣어준다. 그리고 상위에 있는 곳에 eulerAngles로 도리도리 값을 넣어준다. 반대로 넣을 경우
부자연스러운 카메라 움직임을 보여준다.

IsGrounded : 내가 바라보는 방향에 아래쪽으로 레이를 쏴 땅에 닿았나 안닿았나 검사해주는
코드이다. 특별한 없다. transform.up을 곱해주는 이유는 혹시나 모를 경사면 점프를
대비하기 위해서다.

move가 fixedUpdate에 있는 이유는 정기적인 호출을 원해서이다 만약 update에서 관리
를 했을때 정기적으로 갱신을 못해주기에 들쑥날쑥 값이 들어갈 것이다. 그리고 update는
프레임 드랍이 생겼을때 그걸 대응해주지 못해서 캐릭터가 엄청 랙 먹은 것처럼 움직이지만
fixedUpdate는 그것마저 주기적으로 호출하기에 잠깐 프레임드랍이 일어나도 내가 했던
행동들이 그대로 실행되고 있는 상태라 문제가 나올 수 없다.

FixedUpdate는 정기적으로 호출해줘서 그런지 마우스의 감도가 엄청 느리다 그리고 만약
업데이트에 있는 곳에서 움직이거나 순간이동하거나 그럴 때 unity생명주기에 따라 
카메라가 부자연스럽게 이동하거나 한프레임씩 끊긴다거나 충분히 그럴 수 있기에 모든
프레임이 끝나는 lateUpdate에 넣어서 모든 행동이 끝나고 카메라가 위치가 정해지게 하는
것이 옳은 것 같다.

