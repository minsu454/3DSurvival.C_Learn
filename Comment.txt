Q1
입문주차와 입력받는 방식의 차이는 입력방식에 대한 세세한 컨트롤이 된다는 부분인 것 같다. 공통점으로는 그것을 입력받을때 호출되는 횟수는 똑같다.

CharacterManager는 모든 캐릭터를 싱글톤으로 올려서 외부에서 접근이 편하게 하기위해 만들어 놓은 것이고 player는 단순히 내 자신이 들고있는 것들에 대한 데이터를 들고 있는것이다 이로써 얻을 수 있는 이점은 player에 외부에서 일일히 데이터를 GetCompoment하는것이 아닌 player스크립트에 접근하면 모든내용을 긁어올 수 있게 하는 메리트가 있다.

Move : OnMove 로 입력할 때 그 어떤키를 눌렀는지 vector2로 값을 가져온다. 손을 땠을 땐 그걸 초기화해준다. Move에서는 그 값을 가져와서 어떻게 생겨먹을지 모를 내 자신에 앞의 위치를 가져온다. Vector3.forward와 transform.forward는 다를 수 있기에(각도를 돌려버리면 다르다) 거기에 앞뒤 오른쪽 왼쪽으로 값을 더한 백터에 y값은 내 중력값이  계산이 된 velocity에 있는 y값을 채워주고 (이걸 0으로 할 시 점프를 못함) 그 값을 넣어준다.

CameraLook : 일단 mouseDelta라는 녀석은 내가 움직이는 시점에 얼만큼 움직였나를 반환해주는 값이다. 그건 카메라가 고정되어있기에 내 시점으로 고정되어있고 움직일때 그 곳으로 카메라를 돌려주는 것이여서 이 데이터가 필요하다. 축에 대해서는 unity에서  조금만 만져봐도 알수 있다. x축 즉 위아래로 보는 목을 꺽어서 뒤로 보면 괴리감이 들 수 있기에 clamp로 제한을 걸어두고 시작한다. 그값을 넣어주는데 eulerAngles로 넣어줄 경우 기존에 움직이는 도리도리 값이 적용되지않는 문제가 있따. 그래서 localEulerAngles에 넣어준다. 그리고 상위에 있는 곳에 eulerAngles로 도리도리 값을 넣어준다. 반대로 넣을 경우 부자연스러운 카메라 움직임을 보여준다.

IsGrounded : 내가 바라보는 방향에 아래쪽으로 레이를 쏴 땅에 닿았나 안닿았나 검사해주는 코드이다. 특별한 없다. transform.up을 곱해주는 이유는 혹시나 모를 경사면 점프를 대비하기 위해서다.

move가 fixedUpdate에 있는 이유는 정기적인 호출을 원해서이다 만약 update에서 관리 를 했을때 정기적으로 갱신을 못해주기에 들쑥날쑥 값이 들어갈 것이다. 그리고 update는 프레임 드랍이 생겼을때 그걸 대응해주지 못해서 캐릭터가 엄청 랙 먹은 것처럼 움직이지만 fixedUpdate는 그것마저 주기적으로 호출하기에 잠깐 프레임드랍이 일어나도 내가 했던 행동들이 그대로 실행되고 있는 상태라 문제가 나올 수 없다.

FixedUpdate는 정기적으로 호출해줘서 그런지 마우스의 감도가 엄청 느리다 그리고 만약 업데이트에 있는 곳에서 움직이거나 순간이동하거나 그럴 때 unity생명주기에 따라 카메라가 부자연스럽게 이동하거나 한프레임씩 끊긴다거나 충분히 그럴 수 있기에 모든 프레임이 끝나는 lateUpdate에 넣어서 모든 행동이 끝나고 카메라가 위치가 정해지게 하는 것이 옳은 것 같다.

Q2
별도의 UI스크립트를 만드는 이유는 재사용 가능성을 올려주기때문이다. 모든 기능을 한곳에 때려박으면 그때마다 UI기능이 추가 될 때마다 하나하나씩 추가해줘야 될 것이다.
이걸 미리 스크립트에 있는 필요한 기능들을 정리한 후 Manager단에서 그것들을 전부 관리해주고 재사용 하기 쉬운 객체를 만들기 위한 것이다.

인터페이스에 특징은 다중구현이 가능하다라는 점이다. 하나의 class밖에 상속 받지 못하는 c#에서 여러 기능들을 묶어 놓을 수 있어서 객체를 추리거나 다른 객체에게 데이터를 온전히 다 열어주지 않아도 기능을 쓸 수 있기에 유용 한 것 같다. Idamageable같이 대상에게 데미지를 입혀야할 때 누가 데미지를 입든 Idamageable를 호출 할 것이기에 하나하나 검사해줄 필요가 없어 코드가 간편해진다.

UI스크립트 구조는 인벤토리가 모든 인벤토리에 관련된 내용을 들고 있다. 그걸 외부로 연결시켜주고 내부코드도 다 여기서 접근가능하고 사용할 수 있게 구현 되어 있다.

CampFire는 Enter와 Exit로 범위 내에 데미지입을 객체가 충돌했는지 확인해주고 그걸 리스트에 저장하고 빼준다. 그리고 InvokeRepeating를 사용해서 몇초마다 한번씩 리스트에 있는 값들에게 데미지를 주는 코드이다.

DamageIndicator는 이미 준비해둔 UI쪽에서 스크립트에 연결 시켜준다. 그걸 action으로 데미지를 주는 코드에 추가해둔다. 데미지를 주게될 시 action.Invoke로 Flash가 실행된다. 이미지를 기본세팅해주고 그걸 코루틴을 돌며 일정 시간동안 alpha를 더해준 후 확인 후 UI이미지를 꺼준다.

Q3
